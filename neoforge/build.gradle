architectury {
    platformSetupLoomIde()
    neoForge()
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath
}

configurations {
    common
    shadowCommon

    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentNeoForge.extendsFrom common
}

repositories {
    maven {
        name = "NeoForge"
        url = "https://maven.neoforged.net/releases"
    }
    maven {
        name 'Maven for PR #1076' // https://github.com/neoforged/NeoForge/pull/1076
        url 'https://prmaven.neoforged.net/NeoForge/pr1076'
        content {
            includeModule('net.neoforged', 'neoforge')
            includeModule('net.neoforged', 'testframework')
        }
    }
}

dependencies {
    neoForge("net.neoforged:neoforge:${rootProject.neoforge_version}")

    forgeRuntimeLibrary(implementation(include("net.lenni0451:Reflect:${rootProject.reflect_version}")))

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionNeoForge")) { transitive false }
}

remapJar {
    atAccessWideners.add(loom.accessWidenerPath.get().asFile.name)
}

jar {
    dependsOn configurations.shadowCommon
    from {
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE
        configurations.shadowCommon.collect {
            zipTree(it)
        }
    } {
        exclude "META-INF/*.RSA", "META-INF/*.SF", "META-INF/*.DSA"
    }
    from("../common/src/main/resources/assets/immediatelyfast/icon.png") {
        rename { "immediatelyfast-icon.png" }
    }
}

processResources {
    inputs.property "version", project.version

    filesMatching("META-INF/neoforge.mods.toml") {
        expand "version": project.version
    }
}
